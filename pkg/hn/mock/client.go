// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	hn "workshop-starter/pkg/hn"
)

// MockMyClient is a mock of MyClient interface
type MockMyClient struct {
	ctrl     *gomock.Controller
	recorder *MockMyClientMockRecorder
}

// MockMyClientMockRecorder is the mock recorder for MockMyClient
type MockMyClientMockRecorder struct {
	mock *MockMyClient
}

// NewMockMyClient creates a new mock instance
func NewMockMyClient(ctrl *gomock.Controller) *MockMyClient {
	mock := &MockMyClient{ctrl: ctrl}
	mock.recorder = &MockMyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMyClient) EXPECT() *MockMyClientMockRecorder {
	return m.recorder
}

// Maxitem mocks base method
func (m *MockMyClient) Maxitem() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Maxitem")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Maxitem indicates an expected call of Maxitem
func (mr *MockMyClientMockRecorder) Maxitem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Maxitem", reflect.TypeOf((*MockMyClient)(nil).Maxitem))
}

// Get mocks base method
func (m *MockMyClient) Get(id int) (hn.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(hn.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMyClientMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMyClient)(nil).Get), id)
}
